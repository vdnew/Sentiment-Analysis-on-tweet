{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Narendra_Modi_Sentiment_Analysis_100_tweets.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNTE3TyihQB0C6kRNGuB+rU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vdnew/Sentiment-Analysis-on-tweet/blob/main/GBK_Model_2.sav\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DwcTay6GuOkk"
      },
      "source": [
        "import tweepy\r\n",
        "import numpy as np\r\n",
        "import pandas as pd\r\n",
        "import re\r\n",
        "from textblob import TextBlob\r\n",
        "from tweepy import OAuthHandler"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gEZZEefRJIAp"
      },
      "source": [
        "consumer_api_key = 'oFteRkiOlYWFcltcsac31k5iy'\r\n",
        "consumer_api_secret = 'U9nKojJYkwza6iZsNGgnhg887hirpOACngI4qX53PfzAAVFQpm' \r\n",
        "access_token = '772357570061332480-fTXprmuuhNnwJSkbGhrbKkcoV0B0wEx'\r\n",
        "access_token_secret ='D3E5bg7oTmEU6JxZUfD9zkNl4hHN85E1uCxfLXpRklq0j'"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gwMg0FagJLV6"
      },
      "source": [
        "authorizer = OAuthHandler(consumer_api_key, consumer_api_secret)\r\n",
        "authorizer.set_access_token(access_token, access_token_secret)"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kU83WUWJJOnC"
      },
      "source": [
        "api = tweepy.API(authorizer ,timeout=15)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oopSyBOcJaCV"
      },
      "source": [
        "twitterAccount = \"narendramodi\""
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GsJLcbF1Jgr1"
      },
      "source": [
        "tweets = tweepy.Cursor(api.user_timeline, \r\n",
        "                        screen_name=twitterAccount, \r\n",
        "                        count=None,\r\n",
        "                        since_id=None,\r\n",
        "                        max_id=None,\r\n",
        "                        trim_user=True,\r\n",
        "                        exclude_replies=True,\r\n",
        "                        contributor_details=False,\r\n",
        "                        include_entities=False\r\n",
        "                        ).items(100);"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RRiNiDDaJoPf"
      },
      "source": [
        "df = pd.DataFrame(data=[tweet.text for tweet in tweets], columns=['Tweet'])"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fniwWD5yJqXY",
        "outputId": "c7585938-bc1c-459e-ec5e-8a4f219b5b41"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>RT @MEAIndia: #IndiaTogether \\n#IndiaAgainstPr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet\n",
              "0  Centenary celebrations of Chauri Chaura incide...\n",
              "1  Glad to see your affection towards India. :)\\n...\n",
              "2  The incident at Chauri Chaura has a special pl...\n",
              "3  RT @MEAIndia: #IndiaTogether \\n#IndiaAgainstPr...\n",
              "4  India offers unlimited potential in defence an..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YLsssvnpJsfw"
      },
      "source": [
        "def cleanUpTweet(txt):\r\n",
        "    # Remove mentions\r\n",
        "    txt = re.sub(r'@[A-Za-z0-9_]+', '', txt)\r\n",
        "    # Remove hashtags\r\n",
        "    txt = re.sub(r'#', '', txt)\r\n",
        "    # Remove retweets:\r\n",
        "    txt = re.sub(r'RT : ', '', txt)\r\n",
        "    # Remove urls\r\n",
        "    txt = re.sub(r'https?:\\/\\/[A-Za-z0-9\\.\\/]+', '', txt)\r\n",
        "    return txt"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rFaPeiDmJu7f"
      },
      "source": [
        "df['Tweet'] = df['Tweet'].apply(cleanUpTweet)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "m6B1yBGbJxSh",
        "outputId": "1b4a3ad8-8b6c-449f-926d-13949056d53a"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet\n",
              "0  Centenary celebrations of Chauri Chaura incide...\n",
              "1  Glad to see your affection towards India. :)\\n...\n",
              "2  The incident at Chauri Chaura has a special pl...\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n \n",
              "4  India offers unlimited potential in defence an..."
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A2DZB4EFJzYD"
      },
      "source": [
        "\r\n",
        "\r\n",
        "def getTextSubjectivity(txt):\r\n",
        "    return TextBlob(txt).sentiment.subjectivity\r\n",
        "\r\n",
        "def getTextPolarity(txt):\r\n",
        "    return TextBlob(txt).sentiment.polarity\r\n",
        "\r\n"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N2d_DtDjKD20"
      },
      "source": [
        "df['Subjectivity'] = df['Tweet'].apply(getTextSubjectivity)\r\n",
        "df['Polarity'] = df['Tweet'].apply(getTextPolarity)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hyNS8u1dKGXm",
        "outputId": "991dc931-f4af-4fcb-8978-36cbb93d9b7d"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet  Subjectivity  Polarity\n",
              "0  Centenary celebrations of Chauri Chaura incide...      0.000000  0.000000\n",
              "1  Glad to see your affection towards India. :)\\n...      1.000000  0.500000\n",
              "2  The incident at Chauri Chaura has a special pl...      0.571429  0.357143\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n       0.000000  0.000000\n",
              "4  India offers unlimited potential in defence an...      0.666667  0.366667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "28kGzBxVKIDR"
      },
      "source": [
        "df = df.drop(df[df['Tweet'] == ''].index)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RBPsg0xyKO4R"
      },
      "source": [
        "\r\n",
        "\r\n",
        "# negative, nautral, positive analysis\r\n",
        "def getTextAnalysis(a):\r\n",
        "    if a < 0:\r\n",
        "        return \"Negative\"\r\n",
        "    elif a == 0:\r\n",
        "        return \"Neutral\"\r\n",
        "    else:\r\n",
        "        return \"Positive\"\r\n",
        "\r\n"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "darrcueXKR0c"
      },
      "source": [
        "df['Score'] = df['Polarity'].apply(getTextAnalysis)"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "WuEcMmM0KULi",
        "outputId": "473e9359-b768-4657-ae91-a18856af20d5"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "      <th>Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet  ...     Score\n",
              "0  Centenary celebrations of Chauri Chaura incide...  ...   Neutral\n",
              "1  Glad to see your affection towards India. :)\\n...  ...  Positive\n",
              "2  The incident at Chauri Chaura has a special pl...  ...  Positive\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n   ...   Neutral\n",
              "4  India offers unlimited potential in defence an...  ...  Positive\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 284
        },
        "id": "7l13Cnj0KWCk",
        "outputId": "57649efd-0285-4631-ef95-00bf2b6eb564"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "\r\n",
        "labels = df.groupby('Score').count().index.values\r\n",
        "\r\n",
        "values = df.groupby('Score').size().values\r\n",
        "\r\n",
        "plt.bar(labels, values)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<BarContainer object of 3 artists>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "FvBGEsrxKafO",
        "outputId": "0c694642-a752-4dc8-dbf8-7e3ebd7c0c66"
      },
      "source": [
        "for index, row in df.iterrows():\r\n",
        "    if row['Score'] == 'Positive':\r\n",
        "        plt.scatter(row['Polarity'], row['Subjectivity'], color=\"green\")\r\n",
        "    elif row['Score'] == 'Negative':\r\n",
        "        plt.scatter(row['Polarity'], row['Subjectivity'], color=\"red\")\r\n",
        "    elif row['Score'] == 'Neutral':\r\n",
        "        plt.scatter(row['Polarity'], row['Subjectivity'], color=\"blue\")\r\n",
        "\r\n",
        "plt.title('Twitter Sentiment Analysis')\r\n",
        "plt.xlabel('Polarity')\r\n",
        "plt.ylabel('Subjectivity')\r\n",
        "# add legend\r\n",
        "plt.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PyWeKWrGKoS1",
        "outputId": "8f5232dc-a579-4576-f118-ce13774fae2b"
      },
      "source": [
        "\r\n",
        "\r\n",
        "objective = df[df['Subjectivity'] == 0]\r\n",
        "\r\n",
        "print(str(objective.shape[0]/(df.shape[0])*100) + \" % of objective tweets\")\r\n",
        "\r\n"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "45.0 % of objective tweets\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "dZCz-kCpKqtL",
        "outputId": "54fca2ba-3453-450f-9b5b-e85a8b72ce60"
      },
      "source": [
        "from wordcloud import WordCloud\r\n",
        "words = ' '.join([tweet for tweet in df['Tweet']])\r\n",
        "wordCloud = WordCloud(width=600, height=400).generate(words)\r\n",
        "\r\n",
        "plt.imshow(wordCloud)\r\n",
        "plt.show()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vqxm9ppGRsMa"
      },
      "source": [
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "SoB2jF-vRsn7",
        "outputId": "aea6ddcc-997b-4e0b-d6c4-b69fe86cfe7b"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "      <th>Score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet  ...     Score\n",
              "0  Centenary celebrations of Chauri Chaura incide...  ...   Neutral\n",
              "1  Glad to see your affection towards India. :)\\n...  ...  Positive\n",
              "2  The incident at Chauri Chaura has a special pl...  ...  Positive\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n   ...   Neutral\n",
              "4  India offers unlimited potential in defence an...  ...  Positive\n",
              "\n",
              "[5 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PSsmUx7xS2vR",
        "outputId": "c6ccc1bb-0f35-4428-c28c-319ecf101ec1"
      },
      "source": [
        "from nltk.stem.porter import PorterStemmer\r\n",
        "import nltk \r\n",
        "import nltk.corpus\r\n",
        "from nltk.corpus import stopwords\r\n",
        "from nltk.tokenize import BlanklineTokenizer\r\n",
        "from nltk.tokenize import TweetTokenizer\r\n",
        "nltk.download('punkt')\r\n",
        "nltk.download('wordnet')\r\n",
        "nltk.download('stopwords')\r\n",
        "from nltk.stem import WordNetLemmatizer\r\n",
        "import string"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0WPpuIItS608"
      },
      "source": [
        "ps = PorterStemmer() #pour \"text preprocessing\"\r\n",
        "\r\n",
        "message = []\r\n",
        "\r\n",
        "for i in range(0, df.shape[0]):\r\n",
        "    #accepter que les mots alphabétiques\r\n",
        "    review = re.sub('[^a-zA-Z]', ' ', df['Tweet'][i])\r\n",
        "    #convertir tous minuscule\r\n",
        "    review = review.lower()\r\n",
        "    #splitter chaque ligne\r\n",
        "    review = review.split()\r\n",
        "    #\r\n",
        "    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\r\n",
        "    #construire de nouveau la ligne\r\n",
        "    review = ' '.join(review)\r\n",
        "    message.append(review)"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8eaZa4xKS8bI"
      },
      "source": [
        "message\r\n",
        "data = df"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 500
        },
        "id": "9J3x1WpDT8Bn",
        "outputId": "0991ce74-3527-43b4-820b-ade98ecb636e"
      },
      "source": [
        "data['clean_text']=np.empty((len(message),1))\r\n",
        "for i in range(len(message)):\r\n",
        "    data['clean_text'][i]=message[i]\r\n",
        "data['clean_text_len']=data['clean_text'].apply(len)\r\n",
        "data.head()"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n",
            "/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py:670: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  iloc._setitem_with_indexer(indexer, value)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "      <th>Score</th>\n",
              "      <th>clean_text</th>\n",
              "      <th>clean_text_len</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>centenari celebr chauri chaura incid</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>glad see affect toward india believ world fami...</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>Positive</td>\n",
              "      <td>incid chauri chaura special place histori free...</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>indiatogeth indiaagainstpropaganda</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "      <td>Positive</td>\n",
              "      <td>india offer unlimit potenti defenc aerospac ae...</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet  ...  clean_text_len\n",
              "0  Centenary celebrations of Chauri Chaura incide...  ...              36\n",
              "1  Glad to see your affection towards India. :)\\n...  ...              63\n",
              "2  The incident at Chauri Chaura has a special pl...  ...              78\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n   ...              34\n",
              "4  India offers unlimited potential in defence an...  ...              79\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "BWS12ib9UpI7",
        "outputId": "a1c94ec4-624c-4b9c-8cb5-bfcb3a0d7520"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "      <th>Score</th>\n",
              "      <th>clean_text</th>\n",
              "      <th>clean_text_len</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>centenari celebr chauri chaura incid</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>glad see affect toward india believ world fami...</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>Positive</td>\n",
              "      <td>incid chauri chaura special place histori free...</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>indiatogeth indiaagainstpropaganda</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "      <td>Positive</td>\n",
              "      <td>india offer unlimit potenti defenc aerospac ae...</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                               Tweet  ...  clean_text_len\n",
              "0  Centenary celebrations of Chauri Chaura incide...  ...              36\n",
              "1  Glad to see your affection towards India. :)\\n...  ...              63\n",
              "2  The incident at Chauri Chaura has a special pl...  ...              78\n",
              "3       IndiaTogether \\nIndiaAgainstPropaganda \\n\\n   ...              34\n",
              "4  India offers unlimited potential in defence an...  ...              79\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QL0mZLdIUqnQ"
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\r\n",
        "cv = CountVectorizer(max_features=15000)\r\n",
        "X1 = cv.fit_transform(message).toarray()"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VMVb_fQlUunH",
        "outputId": "0822b6bf-641c-4966-c529-e4be7ce9ae62"
      },
      "source": [
        "X1.shape"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 520)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 597
        },
        "id": "IvZOSZ5jUwyt",
        "outputId": "f1f49855-afcb-49d7-9ad1-cd37319ca4a6"
      },
      "source": [
        "X2 = data.copy()\r\n",
        "X2"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Tweet</th>\n",
              "      <th>Subjectivity</th>\n",
              "      <th>Polarity</th>\n",
              "      <th>Score</th>\n",
              "      <th>clean_text</th>\n",
              "      <th>clean_text_len</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Centenary celebrations of Chauri Chaura incide...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>centenari celebr chauri chaura incid</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Glad to see your affection towards India. :)\\n...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>Positive</td>\n",
              "      <td>glad see affect toward india believ world fami...</td>\n",
              "      <td>63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>The incident at Chauri Chaura has a special pl...</td>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.357143</td>\n",
              "      <td>Positive</td>\n",
              "      <td>incid chauri chaura special place histori free...</td>\n",
              "      <td>78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>IndiaTogether \\nIndiaAgainstPropaganda \\n\\n</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>indiatogeth indiaagainstpropaganda</td>\n",
              "      <td>34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>India offers unlimited potential in defence an...</td>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.366667</td>\n",
              "      <td>Positive</td>\n",
              "      <td>india offer unlimit potenti defenc aerospac ae...</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>95</th>\n",
              "      <td>On National Girl Child Day, we salute our Desh...</td>\n",
              "      <td>0.375000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>nation girl child day salut deshkibeti accompl...</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>Thank you Prime Minister ! Our fight against C...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>thank prime minist fight covid share effort</td>\n",
              "      <td>43</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>97</th>\n",
              "      <td>Some glimpses from the programme at Victoria M...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>glimps programm victoria memori parakramdiva</td>\n",
              "      <td>44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>98</th>\n",
              "      <td>জাতীয় গ্রন্থাগার কলকাতার অন্যতম একটি দর্শনীয়...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td>parakramdiva</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>99</th>\n",
              "      <td>আমি পশ্চিম বঙ্গের এই মহৎ ভূমি কে প্রণাম জানাই।</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>Neutral</td>\n",
              "      <td></td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>100 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                Tweet  ...  clean_text_len\n",
              "0   Centenary celebrations of Chauri Chaura incide...  ...              36\n",
              "1   Glad to see your affection towards India. :)\\n...  ...              63\n",
              "2   The incident at Chauri Chaura has a special pl...  ...              78\n",
              "3        IndiaTogether \\nIndiaAgainstPropaganda \\n\\n   ...              34\n",
              "4   India offers unlimited potential in defence an...  ...              79\n",
              "..                                                ...  ...             ...\n",
              "95  On National Girl Child Day, we salute our Desh...  ...              77\n",
              "96  Thank you Prime Minister ! Our fight against C...  ...              43\n",
              "97  Some glimpses from the programme at Victoria M...  ...              44\n",
              "98  জাতীয় গ্রন্থাগার কলকাতার অন্যতম একটি দর্শনীয়...  ...              12\n",
              "99    আমি পশ্চিম বঙ্গের এই মহৎ ভূমি কে প্রণাম জানাই।   ...               0\n",
              "\n",
              "[100 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VC44yjhMUyvH"
      },
      "source": [
        "X2.drop(['Tweet','clean_text'],axis=1,inplace=True)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Oncz0m3wU0gK"
      },
      "source": [
        "X3 = pd.DataFrame(data=X1)"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RxuQ44r7Vf-V",
        "outputId": "6e7af513-89c1-4289-e11a-b245f001fb8d"
      },
      "source": [
        "X3.shape"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(100, 520)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9YxQiTZgVhX-"
      },
      "source": [
        "X4 = pd.concat([X2,X3],axis=1)"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X-yGvg_SVl2w"
      },
      "source": [
        "X4.shape\r\n",
        "X4.drop(['Score'], axis=1, inplace=True)"
      ],
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3VF2dM5WV62D"
      },
      "source": [
        "y = data.Score\r\n",
        "y = y.replace({'negative' : 0 , 'neutral' : 1 , 'positive' : 2})"
      ],
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sy7a3HtxVnQD"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "x_train,x_test,y_train,y_test = train_test_split(X4,y,test_size=0.2,random_state=42)"
      ],
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y3oEdoa0VsR7"
      },
      "source": [
        "import pickle"
      ],
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3GCGZ9BfWKMc"
      },
      "source": [
        "filename = 'GBK_Model1.sav'\r\n",
        "loaded_model = pickle.load(open(filename, 'rb'))"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hMurJK2SWSHV",
        "outputId": "48253973-2e17-4b9b-8b3d-9103bb0ab37c"
      },
      "source": [
        "loaded_model.fit(x_train, y_train)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n",
              "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
              "                           max_features=None, max_leaf_nodes=None,\n",
              "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                           min_samples_leaf=1, min_samples_split=100,\n",
              "                           min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                           n_iter_no_change=None, presort='deprecated',\n",
              "                           random_state=42, subsample=1.0, tol=0.0001,\n",
              "                           validation_fraction=0.1, verbose=0,\n",
              "                           warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0nDqPjd-WbVU",
        "outputId": "345cd17f-b60f-462f-daf5-400184348fc7"
      },
      "source": [
        "loaded_model.score(x_test, y_test)"
      ],
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5_7DZCRrXW-U",
        "outputId": "fb2313e1-e21c-412b-8a7a-a8ef6150a470"
      },
      "source": [
        "loaded_model.predict(x_test)"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral',\n",
              "       'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral',\n",
              "       'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral', 'Neutral',\n",
              "       'Neutral', 'Neutral'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N2GIBOjsW_NX"
      },
      "source": [
        "# Saving New Version of Model\r\n",
        "filename = 'GBK_Model_2.sav'\r\n",
        "pickle.dump(loaded_model, open(filename, 'wb'))"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UNtHSna5XU31"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}